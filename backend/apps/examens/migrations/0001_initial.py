# Generated by Django 5.2 on 2025-06-17 13:00

import django.db.models.deletion
import django_extensions.db.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BiomicroscopySegmentAnterieur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('segment', models.CharField(choices=[('NORMAL', 'Normal'), ('PRESENCE LESION', 'Presence lesion'), ('REMANIEMENT TOTAL', 'Remanement total')], max_length=20, verbose_name='Segment')),
                ('cornee', models.CharField(choices=[('Normal', 'Normal'), ('Opacité Axe', 'Opacité - Axe'), ('Opacité Périphérie', 'Opacité - Périphérie'), ('Opacité Totale', 'Opacité - Totale'), ('Autre', 'Autre')], max_length=30, verbose_name='Corne')),
                ('profondeur', models.CharField(choices=[('Normale', 'Normale'), ('Réduite', 'Réduite'), ('Augmentée', 'Augmentée'), ('Asymétrique', 'Asymétrique')], max_length=30, verbose_name='Profondeur')),
                ('transparence', models.CharField(choices=[('Normal', 'Normal'), ('Anormale', 'Anormale')], max_length=30, verbose_name='Transparence')),
                ('type_anomalie_value', models.CharField(blank=True, choices=[('Pigments', 'Pigments'), ('Hyphéma', 'Hyphéma'), ('Hypopion', 'Hypopion'), ('Autre', 'Autre')], max_length=30, null=True, verbose_name='Anormal transparence')),
                ('quantite_anomalie', models.CharField(blank=True, choices=[('Minime', 'Minime'), ('Atteignant air pupillaire', 'Atteignant air pupillaire'), ('Recouvrant pupille', 'Recouvrant pupille')], max_length=30, null=True, verbose_name='quantité anomalie')),
                ('pupille', models.CharField(choices=[('Normal', 'Normal'), ('Myosis', 'Myosis'), ('Mydriase', 'Mydriase')], max_length=30, verbose_name='Pupille')),
                ('axe_visuel', models.CharField(choices=[('Dégagé', 'Dégagé'), ('Obstrué', 'Obstrué'), ('Leucocorie', 'Leucocorie')], max_length=30, verbose_name='Axe Visuel')),
                ('rpm', models.CharField(choices=[('Normal', 'Normal'), ('Lent', 'Lent'), ('Aboli', 'Aboli')], max_length=30, verbose_name='RPM')),
                ('iris', models.CharField(choices=[('Normal', 'Normal'), ('Iridodonésis', 'Iridodonésis'), ('Rubéose', 'Rubéose'), ('Synéchies', 'Synéchies'), ('Autres', 'Autres')], max_length=30, verbose_name='Iris')),
                ('cristallin', models.CharField(choices=[('Normal', 'Normal'), ('Opaque', 'Opaque'), ('Colobome', 'Colobome'), ('Aphakie', 'Aphakie'), ('Pseudophakie', 'Pseudophakie')], max_length=30, verbose_name='Cristallin')),
                ('position_cristallin', models.CharField(choices=[('Normale', 'Normale'), ('Ectopie', 'Ectopie'), ('Luxation/subluxation antérieure', 'Luxation/subluxation antérieure'), ('Luxation/subluxation postérieure', 'Luxation/subluxation postérieure')], max_length=32, verbose_name='Position Cristallin')),
            ],
            options={
                'verbose_name': 'Segment antérieur (SA)',
                'verbose_name_plural': 'Segment antérieurs (SA)',
            },
        ),
        migrations.CreateModel(
            name='BiomicroscopySegmentPosterieur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('segment', models.CharField(choices=[('NORMAL', 'Normal'), ('PRESENCE LESION', 'Presence lesion'), ('REMANIEMENT TOTAL', 'Remanement total')], max_length=20, verbose_name='Segment')),
                ('vitre', models.CharField(choices=[('Normal', 'Normal'), ('Corps flottants', 'Corps flottants'), ('Hémorragie', 'Hémorragie'), ('Hyalite', 'Hyalite'), ('PVR', 'PVR'), ('Autres', 'Autres')], max_length=30, verbose_name='Vitre')),
                ('retine', models.FloatField(verbose_name='Rétine')),
                ('papille', models.CharField(choices=[('Normale', 'Normale'), ('Excavation élargie', 'Excavation élargie'), ('Atrophie', 'Atrophie'), ('Œdème', 'Œdème'), ('Dysmorphie', 'Dysmorphie'), ('Autres', 'Autres')], max_length=30, verbose_name='Papille')),
                ('macula', models.CharField(choices=[('Normal', 'Normal'), ('Cicatrice', 'Cicatrice'), ('Œdème', 'Œdème'), ('DMLA', 'DMLA')], max_length=30, verbose_name='Macula')),
                ('retinien_peripherique', models.CharField(choices=[('Normal', 'Normal'), ('Cicatrice', 'Cicatrice'), ('Œdème', 'Œdème'), ('Hémorragie', 'Hémorragie'), ('Exudats', 'Exudats'), ('Autre', 'Autre')], max_length=30, verbose_name='Champ rétinien périphérique')),
                ('vaissaux', models.CharField(choices=[('Normaux', 'Normaux'), ('Artériosclérose', 'Artériosclérose'), ('OVR', 'OVR'), ('OAR', 'OAR'), ('Néovaisseux', 'Néovaisseux')], max_length=30, verbose_name='Vaissaux')),
            ],
            options={
                'verbose_name': 'Segment antérieur (SA)',
                'verbose_name_plural': 'Segment antérieurs (SA)',
            },
        ),
        migrations.CreateModel(
            name='BpSuP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('retinographie', models.ImageField(upload_to='media/images/biomicroscopie/retinographie/')),
                ('oct', models.ImageField(upload_to='media/images/biomicroscopie/oct/')),
                ('autres', models.ImageField(upload_to='media/images/biomicroscopie/autres/')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Conclusion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('vision', models.CharField(choices=[('compatible', 'Compatible'), ('incompatible', 'Incompatible'), ('a_risque', 'À risque')], max_length=50, null=True, verbose_name='Conclusion sur la conduite')),
                ('cat', models.TextField(null=True, verbose_name='CAT')),
                ('traitement', models.TextField(null=True, verbose_name='Traitement')),
                ('observation', models.TextField(null=True, verbose_name='Observation')),
                ('rv', models.BooleanField(default=False, help_text='6 mois avec True, moins de 6 mois avec False', verbose_name='RV')),
            ],
            options={
                'verbose_name': 'Conclusion',
                'verbose_name_plural': 'Conclusions',
            },
        ),
        migrations.CreateModel(
            name='OcularTension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('od', models.FloatField(verbose_name='OD (œil droit)')),
                ('og', models.FloatField(verbose_name='OG (œil gauche)')),
                ('ttt_hypotonisant', models.BooleanField(default=False, verbose_name='TTT hypotonisant appliqué')),
                ('ttt_hypotonisant_value', models.CharField(blank=True, choices=[('BBLOQUANTS', 'BBLOQUANTS'), ('IAC', 'IAC'), ('PROSTAGLANDINES', 'PROSTAGLANDINES'), ('PILOCARPINE', 'PILOCARPINE'), ('AUTRES', 'AUTRES')], default=None, max_length=30, null=True, verbose_name='TTT hypotonisant value')),
            ],
            options={
                'verbose_name': 'Tonus oculaire',
                'verbose_name_plural': 'Tonus oculaires',
            },
        ),
        migrations.CreateModel(
            name='Pachymetry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('od', models.FloatField(verbose_name='OD (œil droit)')),
                ('og', models.FloatField(verbose_name='OG (œil gauche)')),
            ],
            options={
                'verbose_name': 'Pachymétrie',
                'verbose_name_plural': 'Pachymétries',
            },
        ),
        migrations.CreateModel(
            name='Perimetry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('pbo', models.CharField(choices=[('Normal', 'Normal'), ('Scotome central', 'Scotome central'), ('Scotome périphérique', 'Scotome périphérique'), ('Amputation', 'Amputation')], max_length=30, null=True, verbose_name='PBO')),
                ('limite_superieure', models.FloatField(verbose_name='Limite supérieure (en degré)')),
                ('limite_inferieure', models.FloatField(verbose_name='Limite inférieure (en degré)')),
                ('limite_temporale_droit', models.FloatField(verbose_name='Limite Temporale  droite')),
                ('limite_temporale_gauche', models.FloatField(verbose_name='Limite Temporale gauche')),
                ('limite_horizontal', models.FloatField(verbose_name='Limite Horizontal')),
                ('score_esternmen', models.FloatField(verbose_name='Score d’Estermen (pourcentage)')),
                ('image', models.ImageField(upload_to='images/perimetries_binoculaire/', verbose_name='Image')),
                ('images', models.FileField(upload_to='images/perimetries_binoculaire/', verbose_name='Images')),
            ],
            options={
                'verbose_name': 'Périmétrie binoculaire',
                'verbose_name_plural': 'Périmétries binoculaires',
            },
        ),
        migrations.CreateModel(
            name='Plaintes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('eye_symptom', models.CharField(choices=[('AUCUN', 'Aucun'), ('BAV', 'BAV'), ('ROUGEUR', 'ROUGEUR'), ('DOULEUR', 'DOULEUR'), ('DIPLOPIE', 'DIPLOPIE'), ('STARBISME', 'STARBISME'), ('NYSTAGMUS', 'NYSTAGMUS'), ('PTOSIS', 'PTOSIS'), ('AUTRES', 'AUTRES')], max_length=30, verbose_name='OD symptom')),
                ('diplopie', models.BooleanField(choices=[(True, 'Oui'), (False, 'Non')], default=False, verbose_name='Diplopie')),
                ('diplopie_type', models.CharField(blank=True, choices=[('monoculaire', 'Monoculaire'), ('binoculaire', 'Binoculaire')], max_length=20, null=True, verbose_name='Diplopie type')),
                ('strabisme', models.BooleanField(choices=[(True, 'Oui'), (False, 'Non')], default=False, verbose_name='Strabisme')),
                ('strabisme_eye', models.CharField(blank=True, choices=[('od', 'OD'), ('og', 'OG'), ('odg', 'ODG')], max_length=20, null=True, verbose_name='Œil affecté par strabisme')),
                ('nystagmus', models.BooleanField(choices=[(True, 'Oui'), (False, 'Non')], default=False, verbose_name='Nystagmus')),
                ('nystagmus_eye', models.CharField(blank=True, choices=[('od', 'OD'), ('og', 'OG'), ('odg', 'ODG')], max_length=20, null=True, verbose_name='Œil affecté par nystagmus')),
                ('ptosis', models.BooleanField(choices=[(True, 'Oui'), (False, 'Non')], default=False, verbose_name='Ptosis')),
                ('ptosis_eye', models.CharField(blank=True, choices=[('od', 'OD'), ('og', 'OG'), ('odg', 'ODG')], max_length=20, null=True, verbose_name='Œil affecté par ptosis')),
            ],
            options={
                'verbose_name': 'Examen clinique - Diplopie, Strabisme, Nystagmus, Ptosis',
                'verbose_name_plural': 'Examens cliniques - Diplopie, Strabisme, Nystagmus, Ptosis',
            },
        ),
        migrations.CreateModel(
            name='Refraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('od_s', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='S OD')),
                ('og_s', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='S OG')),
                ('od_c', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='C OD')),
                ('og_c', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='C OG')),
                ('od_a', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='A OD')),
                ('og_a', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='A OG')),
                ('dp', models.FloatField(verbose_name='DP en mm')),
            ],
            options={
                'verbose_name': 'Réfraction automatisée',
                'verbose_name_plural': 'Réfractions automatisées',
            },
        ),
        migrations.CreateModel(
            name='VisualAcuity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('avsc_od', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='AVSC OD')),
                ('avsc_og', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='AVSC OG')),
                ('avsc_odg', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='AVSC ODG')),
                ('avac_od', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='AVAC OD')),
                ('avac_og', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='AVAC OG')),
                ('avac_odg', models.DecimalField(decimal_places=3, max_digits=5, verbose_name='AVAC ODG')),
            ],
            options={
                'verbose_name': 'Acuité visuelle',
                'verbose_name_plural': 'Acuités visuelles',
            },
        ),
        migrations.CreateModel(
            name='EyeSide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('bp_sg_anterieur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='examens.biomicroscopysegmentanterieur')),
                ('bp_sg_posterieur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='examens.biomicroscopysegmentposterieur')),
                ('plaintes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='examens.plaintes')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClinicalExamen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('visite', models.IntegerField(choices=[(1, 'First'), (2, 'Second'), (3, 'Third')], db_index=True)),
                ('is_completed', models.BooleanField(default=False, verbose_name='Examen clinique complété')),
                ('bp_sup', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='examens.bpsup')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.conducteur')),
                ('conclusion', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='examens.conclusion')),
                ('od', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='od', to='examens.eyeside')),
                ('og', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='og', to='examens.eyeside')),
                ('perimetry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='examens.perimetry')),
            ],
            options={
                'verbose_name': 'Examen clinique',
                'verbose_name_plural': 'Examens cliniques',
            },
        ),
        migrations.CreateModel(
            name='TechnicalExamen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('visite', models.IntegerField(choices=[(1, 'First'), (2, 'Second'), (3, 'Third')], db_index=True)),
                ('is_completed', models.BooleanField(default=False, verbose_name='Examen technique complété')),
                ('ocular_tension', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='examens.oculartension')),
                ('pachymetry', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='examens.pachymetry')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.conducteur')),
                ('refraction', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='examens.refraction')),
                ('visual_acuity', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='examens.visualacuity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Examens',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('visite', models.IntegerField(choices=[(1, 'First'), (2, 'Second'), (3, 'Third')], db_index=True)),
                ('is_completed', models.BooleanField(default=False, verbose_name='Examen global complété')),
                ('clinical_examen', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_examen', to='examens.clinicalexamen')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.conducteur')),
                ('technical_examen', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_examen', to='examens.technicalexamen')),
            ],
            options={
                'verbose_name': 'Examen global',
                'verbose_name_plural': 'Examens globaux',
                'unique_together': {('patient', 'visite')},
            },
        ),
    ]

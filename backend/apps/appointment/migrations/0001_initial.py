# Generated by Django 5.2 on 2025-06-13 09:14

import apps.appointment.models
import datetime
import django.core.validators
import django.db.models.deletion
import django_extensions.db.fields
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AppointmentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('reschedule_attempts', models.PositiveIntegerField(default=0)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('slot_duration', models.PositiveIntegerField(help_text='Minimum time for an appointment in minutes, recommended 30.', null=True)),
                ('lead_time', models.TimeField(help_text='Time when we start working.', null=True)),
                ('finish_time', models.TimeField(help_text='Time when we stop working.', null=True)),
                ('appointment_buffer_time', models.FloatField(help_text="Time between now and the first available slot for the current day (doesn't affect tomorrow).", null=True)),
                ('website_name', models.CharField(default='', help_text='Name of your website.', max_length=255)),
                ('app_offered_by_label', models.CharField(default='Offered by', help_text='Label for `Offered by` on the appointment page', max_length=255)),
                ('default_reschedule_limit', models.PositiveIntegerField(default=3, help_text='Default maximum number of times an appointment can be rescheduled across all services.')),
                ('allow_staff_change_on_reschedule', models.BooleanField(default=True, help_text='Allows clients to change the staff member when rescheduling an appointment.')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('duration', models.DurationField(validators=[django.core.validators.MinValueValidator(datetime.timedelta(seconds=1))])),
                ('background_color', models.CharField(blank=True, default=apps.appointment.models.generate_rgb_color, max_length=50, null=True)),
                ('reschedule_limit', models.PositiveIntegerField(default=0, help_text='Maximum number of times an appointment can be rescheduled.')),
                ('allow_rescheduling', models.BooleanField(default=False, help_text='Indicates whether appointments for this service can be rescheduled.')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('address', models.CharField(blank=True, default='', help_text='Does not have to be specific, just the city and the state', max_length=255, null=True)),
                ('want_reminder', models.BooleanField(default=True)),
                ('additional_info', models.TextField(blank=True, null=True)),
                ('patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.conducteur')),
                ('appointment_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='appointment.appointmentrequest')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='appointmentrequest',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointment.service'),
        ),
        migrations.CreateModel(
            name='StaffMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('slot_duration', models.PositiveIntegerField(blank=True, help_text='Minimum time for an appointment in minutes, recommended 30.', null=True)),
                ('lead_time', models.TimeField(blank=True, help_text='Time when the staff member starts working.', null=True)),
                ('finish_time', models.TimeField(blank=True, help_text='Time when the staff member stops working.', null=True)),
                ('appointment_buffer_time', models.FloatField(blank=True, help_text="Time between now and the first available slot for the current day (doesn't affect tomorrow). e.g: If you start working at 9:00 AM and the current time is 8:30 AM and you set it to 30 minutes, the first available slot will be at 9:00 AM. If you set the appointment buffer time to 60 minutes, the first available slot will be at 9:30 AM.", null=True)),
                ('work_on_saturday', models.BooleanField(default=False)),
                ('work_on_sunday', models.BooleanField(default=False)),
                ('services_offered', models.ManyToManyField(to='appointment.service')),
                ('user', models.OneToOneField(limit_choices_to={'role__in': ['assistant', 'admin']}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DayOff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('staff_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointment.staffmember')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AppointmentRescheduleHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('date', models.DateField(help_text='The previous date of the appointment before it was rescheduled.')),
                ('start_time', models.TimeField(help_text='The previous start time of the appointment before it was rescheduled.')),
                ('end_time', models.TimeField(help_text='The previous end time of the appointment before it was rescheduled.')),
                ('reason_for_rescheduling', models.TextField(blank=True, help_text='Reason for the appointment reschedule.', null=True)),
                ('reschedule_status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed')], default='pending', help_text='Indicates the status of the reschedule action.', max_length=10)),
                ('appointment_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reschedule_histories', to='appointment.appointmentrequest')),
                ('staff_member', models.ForeignKey(help_text='The previous staff member of the appointment before it was rescheduled.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='appointment.staffmember')),
            ],
            options={
                'verbose_name': 'Appointment Reschedule History',
                'verbose_name_plural': 'Appointment Reschedule Histories',
                'ordering': ['-created'],
            },
        ),
        migrations.AddField(
            model_name='appointmentrequest',
            name='staff_member',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='appointment.staffmember'),
        ),
        migrations.CreateModel(
            name='WorkingHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('day_of_week', models.PositiveIntegerField(choices=[(0, 'Sunday'), (1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('staff_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointment.staffmember')),
            ],
            options={
                'verbose_name': 'Working Hour',
                'verbose_name_plural': 'Working Hours',
                'unique_together': {('staff_member', 'day_of_week')},
            },
        ),
    ]
